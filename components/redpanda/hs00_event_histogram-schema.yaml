apiVersion: schemas.vectorized.io/v1alpha2
kind: Schema
metadata:
  name: hs00_event_histogram
spec:
  subject: hs00_event_histogram-value
  schemaType: flatbuffers
  schema: "// General schema for histogram\n\nfile_identifier \"hs00\";\n\ntable ArrayUInt\
    \   { value: [uint];    }\ntable ArrayULong  { value: [ulong];   }\ntable ArrayDouble\
    \ { value: [double];  }\ntable ArrayFloat  { value: [float];   }\n\n// Union of\
    \ allowed data types for the arrays\nunion Array {\n    ArrayUInt,\n    ArrayULong,\n\
    \    ArrayDouble,\n    ArrayFloat,\n}\n\n// Meta information for one dimension\n\
    table DimensionMetaData {\n    length: uint;           // Length of the full histogram\
    \ along this dimension\n    unit: string;           // Unit\n    label: string;\
    \          // Label\n    bin_boundaries: Array;  // Boundary information (should\
    \ be of length: DimensionMetaData.length+1)\n}\n\n// Represents a n-dimensional\
    \ histogram\n// Subsets of histogram are also supported\ntable EventHistogram\
    \ {\n    source: string;                     // Source name\n    timestamp: ulong;\
    \                   // Timestamp (in ns, after unix epoch)\n    dim_metadata:\
    \ [DimensionMetaData];  // Meta data for each dimension\n    last_metadata_timestamp:\
    \ ulong;     // Timestamp (ns, after unix epoch) when the last metadata information\
    \ was written\n    current_shape: [uint] (required);   // Shape of the current\
    \ data in each dimension\n    offset: [uint];                     // Offset giving\
    \ the starting index in each dimension\n    data: Array;                     \
    \   // Data represented in RowMajor order (C Style), filled with 0 if missing\n\
    \    errors: Array;                      // Errors in calculation of histogram\
    \ data (same size as data)\n    info: string;                       // Additional\
    \ information (Integrated/Processed)\n}\n\n// The \"current_shape\" and \"offset\"\
    \ fields can be used to define a slice of a \n// larger histogram. This allows\
    \ breaking a large histogram into multiple messages.\n// For example the dim_metadata\
    \ could look like this:\n// dim_metadata=[DimensionMetaData(label=\"x\", length=10,\
    \ ...), DimensionMetaData(label=\"y\", length=10, ...)]\n// and each row could\
    \ be sent as a separate message by using:\n// current_shape=[10, 1] and offset=[0,\
    \ 0] in the 1st message\n// current_shape=[10, 1] and offset=[0, 1] in the 2nd\
    \ message\n// and so on.\n\nroot_type EventHistogram;\n"
