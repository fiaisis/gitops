apiVersion: schemas.vectorized.io/v1alpha1
kind: Schema
metadata:
  name: se00_data
spec:
  subject: se00_data-value
  schemaType: flatbuffers
  schema: "//Used for storing arrays with optional timestamps, for example waveform\
    \ data.\n\nfile_identifier \"se00\";\n\nenum Location : byte { Unknown = 0, Start,\
    \ Middle, End }\n\ntable Int8Array   { value: [ byte] (required);   }\ntable UInt8Array\
    \  { value: [ubyte] (required);   }\ntable Int16Array  { value: [ short] (required);\
    \  }\ntable UInt16Array { value: [ushort] (required);  }\ntable Int32Array   \
    \ { value: [ int] (required);    }\ntable UInt32Array   { value: [uint] (required);\
    \    }\ntable Int64Array   { value: [ long] (required);   }\ntable UInt64Array\
    \  { value: [ulong] (required);   }\ntable DoubleArray { value: [double] (required);\
    \   }\ntable FloatArray  { value: [float] (required);   }\n\nunion ValueUnion\
    \ {\n    Int8Array,\n    UInt8Array,\n    Int16Array,\n    UInt16Array,\n    Int32Array,\n\
    \    UInt32Array,\n    Int64Array,\n    UInt64Array,\n    DoubleArray,\n    FloatArray\n\
    }\n\ntable se00_SampleEnvironmentData {\n    name: string (required);     // Name\
    \ of the device/source of the data.\n    channel: int;                // Can be\
    \ used to store the ADC channel number. Should be set to -1 if not used.\n   \
    \ packet_timestamp: long;      // The timestamp (in nanoseconds since UNIX epoch)\
    \ of the first sample in the value vector.\n    time_delta: double;          \
    \ // Time in nanoseconds between samples. Available for \"compression\" of the\
    \ schema. Should\n                                 // be set to <= 0 if not used.\n\
    \    timestamp_location: Location; // Relevant when the delta time between two\
    \ consecutive timestamps is long in comparison\n                             \
    \    // to the resolution of the timestamp. For example, when using oversampling.\n\
    \                                 // middle or end of the samples that were summed\
    \ to produce each oversampled sample.\n    values: ValueUnion (required); // The\
    \ sample values.\n    timestamps: [long];         // OPTIONAL (nanosecond) timestamps\
    \ of each individual sample.\n    message_counter: long;       // Monotonically\
    \ increasing counter.\n}\n\nroot_type se00_SampleEnvironmentData;\n"
